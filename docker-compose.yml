services:
  hackathon:
    container_name: hackathon
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "3000:3000"
      - "2345:2345"  # Expose Delve debugger port
    volumes:
      - ./src:/app/src
    depends_on:
      cache:
        condition: service_started
      temporal:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - hack_network
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE
    working_dir: /app
    command: ["python", "src/worker.py"]

  cache:
    image: redis:7.4.0-alpine
    container_name: cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ~/cache_data:/data
    command: redis-server --appendonly yes
    networks:
      - hack_network

  elasticsearch:
    container_name: temporal-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    image: elasticsearch:8.15.1
    networks:
      - temporal-network
    expose:
      - 9200
    volumes:
      - /var/lib/elasticsearch/data

  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:17
    networks:
      - temporal-network
    volumes:
      - /var/lib/postgresql/data

  temporal:
    container_name: temporal
    depends_on:
      - postgresql
      - elasticsearch
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - PROMETHEUS_ENDPOINT=0.0.0.0:8000
    image: temporalio/auto-setup:1.26.2 
    networks:
      - temporal-network
      - hack_network
    ports:
      - 7233:7233
      - 8000:8000
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    healthcheck:
      test: ["CMD-SHELL", "tctl --address temporal:7233 workflow list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:1.26.2-tctl-1.18.1-cli-1.2.0
    networks:
      - temporal-network
    stdin_open: true
    tty: true

  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:8080
      - TEMPORAL_CSRF_COOKIE_INSECURE=true
      - TEMPORAL_FORWARD_HEADERS=true
    image: temporalio/ui:2.34.0
    networks:
      - temporal-network
      - hack_network
    ports:
      - 8080:8080

networks:
  hack_network:
    driver: bridge
    name: hack_network
  temporal-network:
    driver: bridge
    name: temporal-network
